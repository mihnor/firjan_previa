#!/usr/bin/env python3
"""
SISTEMA CONSERVADOR DE REPOSICIONAMENTO AR - FIRJAN XR
====================================================

Este script implementa um reposicionamento conservador que apenas translada
o centro da cena para a origem (0,0,0) sem alterar escalas, rota√ß√µes ou 
rela√ß√µes espaciais entre objetos.

CARACTER√çSTICAS:
- Apenas transla√ß√£o (sem escala)
- Preserva todas as escalas originais
- Preserva todas as rota√ß√µes originais  
- Preserva todas as rela√ß√µes espaciais
- Backup autom√°tico para restaura√ß√£o
- Otimizado para AR sem perder qualidade

RESULTADO:
- Centro exato na origem (0,0,0)
- Todas as transforma√ß√µes preservadas
- Pronto para uso em AR/XR
- Dimens√µes: 62.5 √ó 1.9 √ó 7.0 unidades
"""

import bpy
from mathutils import Vector
import ast

def conservative_ar_positioning():
    """
    Reposiciona a cena para AR preservando todas as transforma√ß√µes originais
    """
    print("üîÑ REPOSICIONAMENTO CONSERVADOR - PRESERVANDO RELA√á√ïES")
    print("=" * 60)
    
    # 1. BACKUP COMPLETO DE SEGURAN√áA
    print("üíæ CRIANDO BACKUP DE SEGURAN√áA...")
    backup_data = {}
    all_mesh_objects = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH']
    
    for obj in all_mesh_objects:
        backup_data[obj.name] = {
            'location': [obj.location.x, obj.location.y, obj.location.z],
            'rotation': [obj.rotation_euler.x, obj.rotation_euler.y, obj.rotation_euler.z],
            'scale': [obj.scale.x, obj.scale.y, obj.scale.z]
        }
    
    print(f"   ‚úÖ Backup criado para {len(all_mesh_objects)} objetos")
    
    # 2. CALCULAR CENTRO ATUAL
    print("\nüìê CALCULANDO CENTRO ATUAL...")
    locations = [obj.location for obj in all_mesh_objects]
    
    center_x = sum(loc.x for loc in locations) / len(locations)
    center_y = sum(loc.y for loc in locations) / len(locations)
    center_z = sum(loc.z for loc in locations) / len(locations)
    
    current_center = Vector((center_x, center_y, center_z))
    target_center = Vector((0.0, 0.0, 0.0))
    
    print(f"   üéØ Centro atual: ({center_x:.2f}, {center_y:.2f}, {center_z:.2f})")
    print(f"   üéØ Centro alvo: (0.00, 0.00, 0.00)")
    
    # 3. CALCULAR TRANSLA√á√ÉO NECESS√ÅRIA
    translation = target_center - current_center
    print(f"   ‚û°Ô∏è Transla√ß√£o necess√°ria: ({translation.x:.2f}, {translation.y:.2f}, {translation.z:.2f})")
    
    # 4. APLICAR APENAS A TRANSLA√á√ÉO
    print("\nüîÑ APLICANDO TRANSLA√á√ÉO CONSERVADORA...")
    print("   (Preservando escalas, rota√ß√µes e rela√ß√µes espaciais)")
    
    for obj in all_mesh_objects:
        # Aplicar apenas transla√ß√£o - N√ÉO mexer em escala ou rota√ß√£o
        obj.location += translation
    
    print(f"   ‚úÖ {len(all_mesh_objects)} objetos transladados")
    
    # 5. VERIFICAR RESULTADOS
    print("\nüìä VERIFICANDO RESULTADOS...")
    new_locations = [obj.location for obj in all_mesh_objects]
    
    new_center_x = sum(loc.x for loc in new_locations) / len(new_locations)
    new_center_y = sum(loc.y for loc in new_locations) / len(new_locations)
    new_center_z = sum(loc.z for loc in new_locations) / len(new_locations)
    
    print(f"   üéØ Novo centro: ({new_center_x:.3f}, {new_center_y:.3f}, {new_center_z:.3f})")
    
    # 6. VERIFICAR PRESERVA√á√ÉO DAS TRANSFORMA√á√ïES
    print("\nüîç VERIFICANDO PRESERVA√á√ÉO DAS TRANSFORMA√á√ïES...")
    scales_preserved = True
    rotations_preserved = True
    
    for obj in all_mesh_objects:
        original = backup_data[obj.name]
        
        # Verificar escala
        if not (abs(obj.scale.x - original['scale'][0]) < 0.001 and 
                abs(obj.scale.y - original['scale'][1]) < 0.001 and 
                abs(obj.scale.z - original['scale'][2]) < 0.001):
            scales_preserved = False
        
        # Verificar rota√ß√£o
        if not (abs(obj.rotation_euler.x - original['rotation'][0]) < 0.001 and 
                abs(obj.rotation_euler.y - original['rotation'][1]) < 0.001 and 
                abs(obj.rotation_euler.z - original['rotation'][2]) < 0.001):
            rotations_preserved = False
    
    print(f"   üîÑ Escalas preservadas: {'‚úÖ SIM' if scales_preserved else '‚ùå N√ÉO'}")
    print(f"   üîÑ Rota√ß√µes preservadas: {'‚úÖ SIM' if rotations_preserved else '‚ùå N√ÉO'}")
    
    # 7. CALCULAR DIMENS√ïES FINAIS
    min_x = min(loc.x for loc in new_locations)
    max_x = max(loc.x for loc in new_locations)
    min_y = min(loc.y for loc in new_locations)
    max_y = max(loc.y for loc in new_locations)
    min_z = min(loc.z for loc in new_locations)
    max_z = max(loc.z for loc in new_locations)
    
    new_width = max_x - min_x
    new_height = max_y - min_y
    new_depth = max_z - min_z
    
    print(f"\nüìè DIMENS√ïES FINAIS:")
    print(f"   Largura: {new_width:.2f} unidades")
    print(f"   Altura: {new_height:.2f} unidades")
    print(f"   Profundidade: {new_depth:.2f} unidades")
    
    # 8. SALVAR BACKUP
    print("\nüíæ SALVANDO BACKUP...")
    bpy.context.scene["conservative_backup"] = str(backup_data)
    print("   ‚úÖ Backup salvo nas propriedades da cena")
    
    print("\nüèÜ REPOSICIONAMENTO CONSERVADOR CONCLU√çDO!")
    print("   ‚úÖ Centro agora na origem (0,0,0)")
    print("   ‚úÖ Todas as escalas preservadas")
    print("   ‚úÖ Todas as rota√ß√µes preservadas")
    print("   ‚úÖ Todas as rela√ß√µes espaciais mantidas")
    print("   ‚úÖ Pronto para uso em AR!")
    print("   üíæ Backup dispon√≠vel para restaura√ß√£o")
    
    return {
        'total_objects': len(all_mesh_objects),
        'new_center': (new_center_x, new_center_y, new_center_z),
        'new_dimensions': (new_width, new_height, new_depth),
        'scales_preserved': scales_preserved,
        'rotations_preserved': rotations_preserved
    }

def restore_conservative_backup():
    """
    Restaura todas as posi√ß√µes originais do backup conservador
    """
    print("üîÑ RESTAURANDO BACKUP CONSERVADOR...")
    print("=" * 40)
    
    # Verificar se existe backup
    if "conservative_backup" not in bpy.context.scene:
        print("‚ùå ERRO: Backup conservador n√£o encontrado!")
        return False
    
    try:
        # Carregar backup
        backup_str = bpy.context.scene["conservative_backup"]
        backup_data = ast.literal_eval(backup_str)
        
        print(f"üì¶ Backup encontrado com {len(backup_data)} objetos")
        
        # Restaurar cada objeto
        restored_count = 0
        for obj_name, transform_data in backup_data.items():
            obj = bpy.context.scene.objects.get(obj_name)
            if obj:
                # Restaurar transforma√ß√µes
                obj.location = Vector(transform_data['location'])
                obj.rotation_euler = Vector(transform_data['rotation'])
                obj.scale = Vector(transform_data['scale'])
                restored_count += 1
                print(f"   ‚úÖ {obj_name} restaurado")
            else:
                print(f"   ‚ùå {obj_name} n√£o encontrado na cena")
        
        print(f"\n‚úÖ RESTAURA√á√ÉO CONCLU√çDA!")
        print(f"   üì¶ {restored_count} objetos restaurados")
        print(f"   üéØ Posi√ß√µes originais recuperadas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO na restaura√ß√£o: {str(e)}")
        return False

def verify_ar_status():
    """
    Verifica se a cena est√° otimizada para AR
    """
    print("üîç VERIFICANDO STATUS AR...")
    print("=" * 30)
    
    all_mesh_objects = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH']
    
    if not all_mesh_objects:
        print("‚ùå Nenhum objeto mesh encontrado")
        return False
    
    # Verificar centro
    locations = [obj.location for obj in all_mesh_objects]
    center_x = sum(loc.x for loc in locations) / len(locations)
    center_y = sum(loc.y for loc in locations) / len(locations)
    center_z = sum(loc.z for loc in locations) / len(locations)
    
    distance_from_origin = (center_x**2 + center_y**2 + center_z**2)**0.5
    
    print(f"üìä STATUS:")
    print(f"   üì¶ Total de objetos: {len(all_mesh_objects)}")
    print(f"   üéØ Centro: ({center_x:.3f}, {center_y:.3f}, {center_z:.3f})")
    print(f"   üìè Dist√¢ncia da origem: {distance_from_origin:.6f}")
    
    # Verificar se est√° centralizado
    is_centered = distance_from_origin < 0.001
    print(f"   üéØ Centralizado: {'‚úÖ SIM' if is_centered else '‚ùå N√ÉO'}")
    
    # Verificar backup
    has_backup = "conservative_backup" in bpy.context.scene
    print(f"   üíæ Backup dispon√≠vel: {'‚úÖ SIM' if has_backup else '‚ùå N√ÉO'}")
    
    return is_centered

def get_scene_info():
    """
    Mostra informa√ß√µes detalhadas da cena
    """
    print("üìã INFORMA√á√ïES DA CENA")
    print("=" * 25)
    
    all_mesh_objects = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH']
    
    if not all_mesh_objects:
        print("‚ùå Nenhum objeto mesh encontrado")
        return
    
    # Calcular bounding box
    locations = [obj.location for obj in all_mesh_objects]
    min_x = min(loc.x for loc in locations)
    max_x = max(loc.x for loc in locations)
    min_y = min(loc.y for loc in locations)
    max_y = max(loc.y for loc in locations)
    min_z = min(loc.z for loc in locations)
    max_z = max(loc.z for loc in locations)
    
    print(f"üì¶ Objetos: {len(all_mesh_objects)}")
    print(f"üìê Bounding Box:")
    print(f"   X: {min_x:.2f} ‚Üí {max_x:.2f} (largura: {max_x - min_x:.2f})")
    print(f"   Y: {min_y:.2f} ‚Üí {max_y:.2f} (altura: {max_y - min_y:.2f})")
    print(f"   Z: {min_z:.2f} ‚Üí {max_z:.2f} (profundidade: {max_z - min_z:.2f})")
    
    # Centro
    center_x = sum(loc.x for loc in locations) / len(locations)
    center_y = sum(loc.y for loc in locations) / len(locations)
    center_z = sum(loc.z for loc in locations) / len(locations)
    
    print(f"üéØ Centro: ({center_x:.3f}, {center_y:.3f}, {center_z:.3f})")

# EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    print("üöÄ SISTEMA CONSERVADOR DE REPOSICIONAMENTO AR - FIRJAN XR")
    print("=" * 65)
    
    # Verificar status atual
    get_scene_info()
    
    # Executar reposicionamento conservador
    conservative_ar_positioning()
    
    # Verificar status final
    verify_ar_status()
    
    print("\nüèÜ SISTEMA CONSERVADOR EXECUTADO COM SUCESSO!")
    print("   Cena centrada na origem para AR")
    print("   Todas as transforma√ß√µes preservadas")
    print("   Backup dispon√≠vel para restaura√ß√£o") 